/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AIAgentWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aiAgent"
      | "dailyLimit"
      | "dailySpent"
      | "emergencyWithdraw"
      | "executeTransaction"
      | "isLocked"
      | "lastResetTime"
      | "owner"
      | "setAIAgent"
      | "setDailyLimit"
      | "toggleLock"
      | "updateWhitelist"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DailyLimitChanged"
      | "TransactionExecuted"
      | "WalletLocked"
      | "WhitelistUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "aiAgent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailySpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastResetTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAIAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "aiAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dailyLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dailySpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastResetTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAIAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace DailyLimitChangedEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [to: AddressLike, value: BigNumberish];
  export type OutputTuple = [to: string, value: bigint];
  export interface OutputObject {
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletLockedEvent {
  export type InputTuple = [locked: boolean];
  export type OutputTuple = [locked: boolean];
  export interface OutputObject {
    locked: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistUpdatedEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIAgentWallet extends BaseContract {
  connect(runner?: ContractRunner | null): AIAgentWallet;
  waitForDeployment(): Promise<this>;

  interface: AIAgentWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aiAgent: TypedContractMethod<[], [string], "view">;

  dailyLimit: TypedContractMethod<[], [bigint], "view">;

  dailySpent: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  executeTransaction: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  isLocked: TypedContractMethod<[], [boolean], "view">;

  lastResetTime: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setAIAgent: TypedContractMethod<
    [_aiAgent: AddressLike],
    [void],
    "nonpayable"
  >;

  setDailyLimit: TypedContractMethod<
    [_limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  toggleLock: TypedContractMethod<[], [void], "nonpayable">;

  updateWhitelist: TypedContractMethod<
    [account: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aiAgent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dailyLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailySpent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isLocked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastResetTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAIAgent"
  ): TypedContractMethod<[_aiAgent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDailyLimit"
  ): TypedContractMethod<[_limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleLock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateWhitelist"
  ): TypedContractMethod<
    [account: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "DailyLimitChanged"
  ): TypedContractEvent<
    DailyLimitChangedEvent.InputTuple,
    DailyLimitChangedEvent.OutputTuple,
    DailyLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "WalletLocked"
  ): TypedContractEvent<
    WalletLockedEvent.InputTuple,
    WalletLockedEvent.OutputTuple,
    WalletLockedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistUpdated"
  ): TypedContractEvent<
    WhitelistUpdatedEvent.InputTuple,
    WhitelistUpdatedEvent.OutputTuple,
    WhitelistUpdatedEvent.OutputObject
  >;

  filters: {
    "DailyLimitChanged(uint256)": TypedContractEvent<
      DailyLimitChangedEvent.InputTuple,
      DailyLimitChangedEvent.OutputTuple,
      DailyLimitChangedEvent.OutputObject
    >;
    DailyLimitChanged: TypedContractEvent<
      DailyLimitChangedEvent.InputTuple,
      DailyLimitChangedEvent.OutputTuple,
      DailyLimitChangedEvent.OutputObject
    >;

    "TransactionExecuted(address,uint256)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "WalletLocked(bool)": TypedContractEvent<
      WalletLockedEvent.InputTuple,
      WalletLockedEvent.OutputTuple,
      WalletLockedEvent.OutputObject
    >;
    WalletLocked: TypedContractEvent<
      WalletLockedEvent.InputTuple,
      WalletLockedEvent.OutputTuple,
      WalletLockedEvent.OutputObject
    >;

    "WhitelistUpdated(address,bool)": TypedContractEvent<
      WhitelistUpdatedEvent.InputTuple,
      WhitelistUpdatedEvent.OutputTuple,
      WhitelistUpdatedEvent.OutputObject
    >;
    WhitelistUpdated: TypedContractEvent<
      WhitelistUpdatedEvent.InputTuple,
      WhitelistUpdatedEvent.OutputTuple,
      WhitelistUpdatedEvent.OutputObject
    >;
  };
}
